[{"title":"网络安全法","url":"/posts/aa56f87.html","content":"\n# 网络安全法\n\n> [!Warning]\n>\n> 本人所有文章均为技术分享与知识记录，仅用于以防御为目的的教学演示，所有操作均在实验环境下进行，请各位读者勿用于其他用途，否则后果自负。\n\n2016 年 11 月 7 日，第二十届全国人民代表大会常务委员会通过了《中华人民共和国网络安全法》，该法案于 2017 年 6 月 1 日开始生效。\n\n全文链接：[中华人民共和国网络安全法](https://www.gov.cn/xinwen/2016-11/07/content_5129723.htm)\n\n## 1 关键条目\n\n第一条：\n- 为了保障网络安全，维护网络空间主权和国家安全、社会公共利益，保护公民、法人和其他组织的合法权益，促进经济社会信息化健康发展，制定本法。\n\n**第二十七条**：\n\n- 任何个人和组织不得从事非法侵入他人网络、干扰他人网络正常功能、窃取网络数据等危害网络安全的活动；不得提供专门用于从事侵入网络、干扰网络正常功能及防护措施、窃取网络数据等危害网络安全活动的程序、工具；明知他人从事危害网络安全的活动的，不得为其提供技术支持、广告推广、支付结算等帮助。\n\n第四十一条：\n- 网络运营者收集、使用个人信息，应当遵循合法、正当、必要的原则，公开收集、使用规则，明示收集、使用信息的目的、方式和范围，并经被收集者同意。\n- 网络运营者不得收集与其提供的服务无关的个人信息，不得违反法律、行政法规的规定和双方的约定收集、使用个人信息，并应当依照法律、行政法规的规定和与用户的约定，处理其保存的个人信息。\n\n第四十二条：\n- 网络运营者不得泄露、篡改、毁损其收集的个人信息；未经被收集者同意，不得向他人提供个人信息。但是，经过处理无法识别特定个人且不能复原的除外。\n- 网络运营者应当采取技术措施和其他必要措施，确保其收集的个人信息安全，防止信息泄露、毁损、丢失。在发生或者可能发生个人信息泄露、毁损、丢失的情况时，应当立即采取补救措施，按照规定及时告知用户并向有关主管部门报告。\n\n**第四十四条**：\n\n- 任何个人和组织不得窃取或者以其他非法方式获取个人信息，不得非法出售或者非法向他人提供个人信息。\n\n**第四十六条**：\n\n- 任何个人和组织应当对其使用网络的行为负责，不得设立用于实施诈骗，传授犯罪方法，制作或者销售违禁物品、管制物品等违法犯罪活动的网站、通讯群组，不得利用网络发布涉及实施诈骗，制作或者销售违禁物品、管制物品以及其他违法犯罪活动的信息。\n\n**第四十八条**：\n\n- 任何个人和组织发送的电子信息、提供的应用软件，不得设置恶意程序，不得含有法律、行政法规禁止发布或者传输的信息。\n\n## 2 详细介绍\n\n### 2.1 定义和范围\n\n网络安全法明确了对网络安全的定义，包括保护网络空间的安全、保护网络基础设施的安全和保护网络应用的安全。\n\n适用范围包括中华人民共和国的网络空间、网络基础设施和网络应用。\n\n### 2.2 基本原则\n\n网络安全法强调了网络安全工作的基本原则，包括依法治理、综合治理、分级负责、共同参与的原则。\n\n强调网络安全的维护是全社会的共同责任，需要政府、企事业单位、网络运营者和个人共同参与。\n\n### 2.3 网络运营者的责任和义务\n\n网络安全法规定了网络运营者的责任和义务，包括采取必要的技术措施保护网络安全，防止网络犯罪活动。\n\n网络运营者要建立健全网络安全管理制度，明确网络安全管理责任，采取措施防止网络安全事件的发生，并及时处置网络安全事件。\n\n### 2.4 个人信息保护\n\n网络安全法对个人信息的收集、使用、存储、传输等行为提出了明确的规定。\n\n网络运营者在收集和使用个人信息时必须经过事先同意，并采取必要的措施保护个人信息的安全。\n\n网络运营者还应当及时采取补救措施，防止个人信息泄露、损毁、丢失或被篡改。\n\n### 2.5 网络安全监管和处罚\n\n网络安全法规定了网络安全的监管措施，包括网络安全检查、网络安全事件的报告和处置等。\n\n对于违反网络安全法的行为，法律规定了相应的处罚措施，包括警告、罚款、限制或暂停网络服务、吊销许可证等。\n\n### 2.6 国际合作和技术支持\n\n网络安全法鼓励加强网络安全技术研发和国际合作，提高中国的网络安全能力。\n\n促进网络安全技术的创新和应用，推动网络安全产业的发展。\n\n## 3 六大亮点\n\n**明确了网络空间主权的原则**：网络安全法明确了网络空间主权的原则，强调中华人民共和国对自己的网络空间拥有主权。这意味着国家有权制定相关法律法规，维护网络空间的安全和秩序。\n\n**明确了网络产品和服务提供者的安全义务**：网络安全法规定了网络产品和服务提供者的安全义务。这包括网络产品和服务提供者应当采取必要的安全措施，保护用户信息和网络安全，防止网络犯罪活动。他们需要进行安全评估、漏洞修复等，确保其产品和服务的安全性。\n\n**明确了网络运营者的安全义务**：网络安全法明确了网络运营者的安全义务。网络运营者包括互联网服务提供商、云服务提供商、应用程序提供商等。他们需要采取措施，防范网络安全风险，保护网络安全。他们还需配合有关部门的网络安全检查和监管工作。\n\n**进一步完善了个人信息保护规则**：《中华人民共和国网络安全法》对个人信息的保护进行了进一步完善。它规定了个人信息的收集和使用应当遵循合法、正当、必要的原则。网络运营者在收集和使用个人信息时，必须经过事先同意，并采取措施保护个人信息的安全。同时，该法明确了用户有权了解、更正、删除个人信息的权利。\n\n**建立了关键信息基础设施安全保护制度**：网络安全法建立了关键信息基础设施安全保护制度。关键信息基础设施是指对国家安全、国民经济运行和人民生活具有重要影响的网络设施。根据该法，关键信息基础设施的运营者需要采取必要的安全措施，保护其安全可控和防范网络攻击。\n\n**确立了关键信息机出设施重要数据跨境传输的规则**：网络安全法还确立了关键信息基础设施重要数据跨境传输的规则。这意味着关键信息基础设施的重要数据在跨境传输时，需要符合国家安全审查和审核的要求，确保数据的安全性和保密性。\n\n## 4 结语\n\n《中华人民共和国网络安全法》旨在加强中国的网络安全管理，保护网络安全和个人信息的安全。它规定了网络运营者的责任和义务，要求网络运营者采取必要的技术措施保护网络安全，防止网络犯罪活动。该法案还规定了网络安全的监管措施和处罚条款，对网络攻击、网络窃密、传播虚假信息等行为进行了明确的界定，并规定了相应的处罚措施。\n\n此外，该法案还规定了个人信息保护的措施，要求网络运营者在收集和使用个人信息时必须经过事先同意，并保护个人信息的安全。它还鼓励加强网络安全技术研发和国际合作，提高中国的网络安全能力。\n","categories":["信息安全"]},{"title":"Hexo 部署到 Aliyun","url":"/posts/1659ba23.html","content":"\n# Hexo 部署到 aliyun\n\n之前个人所有笔记都是放在语雀上，主要除了学生也没啥人看，后面接触多了感觉写写博客好像也蛮不错的。\n\n陆陆续续也搭建过 WordPress 和 Hexo 再三权衡（~~拖了半年~~）最后还是选择了 Hexo，并将 Hexo 博客托管在了 GitHub 上并绑定了 yongz.icu 这个域名（现在不用了）。\n\n但总所周知 GitHub 由于某些原因在国内访问速度极慢，hexo deploy 慢的一匹。最后还是下定决心买了阿里云服务器，然后将 Hexo 博客部署到云服务器上，顺便绑个新域名。\n\n> [!Note]\n>\n> 本文来自 koenli 大佬：[https://www.koenli.com/bda2f0d3.html](https://www.koenli.com/bda2f0d3.html)\n\n## 1 服务器配置\n\n服务器配置如下表所示~~（有点破烂）~~：\n\n| CPU | 内存  |    操作系统    |     Git     | Web |\n| :-: | :-: | :--------: | :---------: | :-: |\n| 2 核 | 2G  | CentOS 7.6 | yum install | 宝塔  |\n\n- **CPU/内存**：由于 Hexo 是静态博客，不需要多高的配置，1 核 1G 都是随便跑（~~访问量贼大当我没说~~）。\n- **操作系统**：这里我必须要吐槽，Ubuntu 为什么不行，我装了三遍都不行，最终认命装了 CentOS 7.6 就可以了（~~我敲~~）。\n- **Git**：大佬博客上写的是 Git 在 CentOS 上版本会很旧，我直接就用 yum 安装了一个，实际试下来，没啥问题。\n- **Web**：可自行安装 Nginx 或 Apache~~（不嫌麻烦的话）~~，这里推荐使用宝塔，因为其不仅可以方便的添加网站和开启 HTTPS，还支持对服务器进行资源监控，端口管理等功能，是一款能够有效提升运维效率的服务器管理软件（~~不是推广~~）。\n\n## 2 Git 配置\n\n### 2.1 创建 Git 用户并配置 sudo 权限\n\n创建一个 Git 用户，用于 SSH 连接：\n\n```shell\nuseradd git\n```\n\n由于 Git 用户会涉及到 root 命令的使用，配置一下 sudo 权限（CentOS visudo 用的是 Vim，Ubuntu 用的是 Nano）：\n\n```shell\nvisudo\n```\n\n找到 `root ALL=(ALL) ALL`，在下面一行添加以下内容并保存退出：\n\n```shell\nroot ALL=(ALL) ALL\ngit ALL=(ALL) ALL\n```\n\n### 2.2 配置 SSH 密钥\n\n在本地机器执行以下命令创建密钥，如果本地机器是 Windows 则在 Git Bash 中执行（~~可以不用，但是最好要用~~）。\n\n```shell\nssh-keygen\n```\n\n> [!Warning]\n>\n> 如果本地机器已有密钥，可跳过此步，无需重复创建~\n\n生成的公钥文件，Windows 和 Linux 的位置有所不同：\n\n- Windows：`C:/User/%USERNAME%/.ssh/id_rsa.pub`\n- Linux：`~/.ssh/id_rsa.pub`\n\n在服务器上执行如下命令，创建 `.ssh` 目录和 `authorized_keys` 文件，并修改文件权限（非常重要，权限问题会导致 SSH 连接失败）：\n\n```shell\n## 切换至 git 用户，连同环境变量一起\nsu - git\nmkdir ~/.ssh\n\n## 这里其实不太建议用 echo，建议是 vim ~/.ssh/authorized_keys，然后直接粘贴保存\necho \"替换为id_rsa.pub文件的内容\" > ~/.ssh/authorized_keys \n\n## 修改文件权限\nchmod 700 ~/.ssh\nchmod 600 ~/.ssh/authorized_keys\n\n## 切换回root用户\nexit\n```\n\n测试从本地机器上是否可以通过 git 用户免密登录服务器：\n\n```shell\nssh git@<yourIP>\n```\n\n### 2.3 创建网站根目录\n\n> [!Info]\n>\n> - 这里我是直接照搬大佬博客的路径（~~其实就是懒~~）。\n> - 此网站根目录对应 Web 软件的网站发布目录，可自定义。\n\n使用如下命令创建目录，并转移用户所属主和组：\n\n```shell\nmkdir -p /data/web/blog\nchown git:git -R /data/web/blog\n```\n\n### 2.4 初始化 Git 裸仓库并配置自动化部署\n\n使用如下命令初始化 git 仓库：\n\n```shell\n## 创建 git 目录\nmkdir -p /data/git\ncd /data/git/\n\n## 一定要加上 --bare 参数，将仓库设置为共享仓库\ngit init --bare blog.git\nchown git:git -R blog.git\n```\n\n此时在 Git 仓库目录（`/data/git/blog.git`）下，有一个自动生成的 `hooks` 目录，在 `hooks` 目录下创建一个新的钩子 `post-receive`，用于自动化部署：\n\n```shell\nvim /data/git/blog.git/hooks/post-receive\n```\n\n在文件中添加以下内容，根据实际情况修改工作树目录和 Git 目录：\n\n```shell\n#!/bin/bash\n## git --work-tree=<work-tree-dir> --git-dir=<git-dir> checkout -f\ngit --work-tree=/data/web/blog --git-dir=/data/git/blog.git checkout -f\n```\n\n修改文件权限：\n\n```shell\nchown git:git /data/git/blog.git/hooks/post-receive\nchmod +x /data/git/blog.git/hooks/post-receive\n```\n\n## 3 安装并配置宝塔\n\n### 3.1 安装宝塔\n\n- 宝塔 Linux 面板是提升运维效率的服务器管理软件，支持一键 LAMP/LNMP/ 集群 / 监控 / 网站 / FTP / 数据库 / JAVA 等 100 多项服务器管理功能。\n- 宝塔官网：[https://www.bt.cn/new/index.html](https://www.bt.cn/new/index.html)。\n\n由于此处我用的是 CentOS，安装命令如下（记得一定要是==纯净系统==）：\n\n```shell\ncd /tmp ; yum install -y wget && wget -O install.sh https://download.bt.cn/install/install_6.0.sh && sh install.sh ed8484bec\n```\n\n中间会让确认是否默认安装到 `/www` 目录下，输入 `y` 回车即可：\n\n```shell\nDo you want to install Bt-Panel to the /www directory now?(y/n):y\n```\n\n网络状况良好的情况下大概 3 分钟即可安装完成，安装成功会输出如下内容，其中包括面板的外网、内网访问地址和默认的用户名密码，这些信息也可通过之后再通过 `/etc/init.d/bt default` 命令查看：\n\n```typescript\n==================================================================\nCongratulations! Installed successfully!\n==================================================================\n外网面板地址:  https://xxx.xxx.xxx.xxx:39893/f0621e2c\n内网面板地址:  https://172.19.10.62:39893/f0621e2c\nusername: l8fxgpwg\npassword: 62420ae9\nIf you cannot access the panel,\nrelease the following panel port [39893] in the security group\n若无法访问面板，请检查防火墙/安全组是否有放行面板[39893]端口\n注意：初始密码仅在首次登录面板前能正确获取，其它时间请通过 bt 5 命令修改密码\n==================================================================\nTime consumed: 3 Minute!\n```\n\n> [!Warning]\n>\n> 云服务器记得配置端口组，开放相关端口。\n\n### 3.2 配置宝塔 Linux 面板\n\n通过浏览器访问面板地址，通过上述的默认用户名密码登录即可。因为宝塔面板许多功能都依赖于官网，第一次登录后需要绑定宝塔账号，如果还没有宝塔账号可以点击 “登录” 按钮下方的 “未有账号，免费注册” 跳转到注册，如果已有宝塔账号则直接输入账号信息点击 “登录” 进行绑定。\n\n在 “推荐安装套件” 窗口选择安装 LNMP (推荐)，仅勾选安装 “Nginx”，安装方式选择 “极速安装”，最后点击 “一键安装”，等待安装完成（我已经装完了，用下大佬的图）：\n\n![image-20230902161828955](http://yongz-typro.oss-cn-beijing.aliyuncs.com/website/image-20230902161847538.jpg)\n\n### 3.3 添加网站并按需配置 SSL 证书\n\n点击 “网站”，选择 “添加站点”：\n\n![image-20230902161838860](http://yongz-typro.oss-cn-beijing.aliyuncs.com/website/image-20230902161838860.jpg)\n\n填写网站相关信息后，点击 “提交”：\n\n- **域名**：设置网站域名，如需填写多个域名，请换行填写，每行一个域名，默认为 80 端口。\n- **根目录**：此处设置的根目录就是之前创建的网站根目录 `/data/web/blog`，如果不是根据教程创建的，选择相应的目录即可。\n\n先到 aliyun 上购买个免费证书，信息填写完后，大概十分钟就能发到邮箱：\n\n![image-20230902161843713](http://yongz-typro.oss-cn-beijing.aliyuncs.com/website/image-20230902161828955.jpg)\n\n到域名注册商根据服务器类型（此处为 Nginx）下载对应域名的 SSL 证书（以阿里云为例），其中 `.key` 后缀的是密钥，`.pem` 后缀的是证书：\n\n![image-20230902161847538](http://yongz-typro.oss-cn-beijing.aliyuncs.com/website/image-20230902161854332.jpg)\n\n点击刚创建的网站 SSL 证书下的 “未部署” 字样，选择 “当前证书”，用文本编辑器完整复制粘贴密钥（KEY）和证书 (PEM 或 CRT 格式) 的内容到对应的文本框中，点击 “保存”并强制开始 HTTPS：\n\n![image-20230902161854332](http://yongz-typro.oss-cn-beijing.aliyuncs.com/website/image-20230902161903332.jpg)\n\n到这里服务器上需要配置的内容就结束了。\n\n> 2025 更新：现在宝塔上可以直接支持部署免费证书啦~\n\n## 4 配置本地 Hexo\n\n由于之前我是配置提交到 GitHub 上，选在需要修改提交到自己的服务器上，在博客根目录 `_config.yml` 中添加以下内容：\n\n```yaml\n## Deployment\n### Docs: https://hexo.io/docs/one-command-deployment\ndeploy:\n  type: 'git'\n## repo: 'https://github.com/Y0n9zh/Y0n9zh.github.io.git' # 仓库地址\n## repo: git@<x.x.x.x>(服务器IP):<git-dir>    #仓库地址\n## repo: ssh://git@<x.x.x.x>(服务器IP):<ssh-port><git-dir>    #发布至SSH非22端口服务器\n  repo: git@xxx.xxx.xxx.xxx:/data/git/blog.git\n  branch: master # 主分支\n```\n\n执行部署：\n\n```shell\nhexo clean all && hexo g && hexo d\n```\n\n访问前需要在域名注册商配置域名解析，将域名解析到云服务器 IP 地址，如果是本地服务器也可通过配置 hosts 解析进行测试：\n\n![image-20230902161858870](http://yongz-typro.oss-cn-beijing.aliyuncs.com/website/image-20230902161843713.jpg)\n\n访问一下博客域名，查看是否成功：\n\n![image-20230902161903332](http://yongz-typro.oss-cn-beijing.aliyuncs.com/website/image-20230902161858870.jpg)\n\n完结撒花~\n","categories":["日常"]},{"title":"Hexo 博客搭建","url":"/posts/196d2ba7.html","content":"\n# Hexo 博客搭建\n\n## 1 Hexo 介绍\n\nHexo 官网地址：[https://hexo.io/zh-cn/](https://hexo.io/zh-cn/)\n\n![Hexo 官网主页](http://yongz-typro.oss-cn-beijing.aliyuncs.com/website/20250821161828952.jpg)\n\nHexo 是一个基于 Node.js 构建的静态博客生成框架。它允许用户使用 Markdown 或其他标记语言编写文章，并通过简单的命令将这些文章转换为静态网页，从而可以轻松地创建个人博客或网站。Hexo 的主要特点包括：\n\n- **静态网页生成**： Hexo 将文章和页面内容转换为静态 HTML 文件，这意味着访问者在浏览时不需要执行服务器端的代码，从而加快页面加载速度。\n- **Markdown 支持**： 用户可以使用 Markdown 语法来编写文章，这是一种轻量级的标记语言，易于学习和使用。\n- **主题和插件**： Hexo 支持各种主题和插件，用户可以选择适合自己风格的主题，同时可以利用插件来增强博客的功能。\n- **简单命令行操作**： Hexo 提供了一系列简单的命令，如创建新文章、生成静态页面、部署到远程服务器等，使用户可以轻松管理和维护博客。\n- **版本控制和备份**： 由于 Hexo 生成的是静态文件，您可以将博客内容存储在版本控制系统中，如 Git，以便轻松地管理内容版本和进行备份。\n\n## 2 Hexo 安装\n\n安装 Hexo 相当简单，只需要先安装下列应用程序即可（对应官网下载安装包即可）：\n\n- Node.js (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)\n- Git\n\n上述应用安装完成后，替换 npm 镜像源：\n\n```shell\nnpm config set registry https://registry.npmmirror.com\n```\n\n替换完成后，即可使用 npm 安装 Hexo：\n\n```shell\nnpm install hexo-cli -g\n```\n\n## 3 Hexo 建站\n\n### 3.1 本地部署\n\n#### 3.1.1 Hexo 快速搭建\n\n安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件（在任意编辑器中打开 Git Bash 即可）：\n\n```shell\n# 由于未知的网络问题，可能会出现代码拉取不下来的情况这里你懂的\ngit config --global http.proxy \"http://127.0.0.1:7897\"\ngit config --global https.proxy \"https://127.0.0.1:7897\"\n\n# 创建并初始化文件夹\nhexo init hexo-blog\n\n# 这里需要注意，如果使用 WebStorm 需要先初始化在打开\n```\n\n在 hexo-blog 目录中安装依赖：\n\n```shell\nnpm install\n```\n\n#### 3.1.2 Hexo 常用命令\n\n|          **命令**           |                          **说明**                           |\n| :-------------------------: | :---------------------------------------------------------: |\n|     hexo init [folder]      |                   新建并初始化一个文件夹                    |\n| hexo new [layout] \\<title\\> |                        新建一篇文章                         |\n|     hexo generate [-d]      |                        生成静态文件                         |\n|         hexo server         | 启动服务器，在默认情况下访问网址为： <http://localhost:4000/> |\n|         hexo deploy         |                      部署网站（上传）                       |\n|         hexo clean          |     清除缓存文件 (db.json) 和已生成的静态文件 (public)      |\n\n快速启动查看效果：\n\n```typescript\nhexo generate ; hexo server\n```\n\n![Hexo 本地搭建默认页面](http://yongz-typro.oss-cn-beijing.aliyuncs.com/website/20250821161828951.jpg)\n\n### 3.2 GitHub 部署\n\n> 前提：注册一个 GitHub 账号。\n\n#### 3.2.1 新建仓库\n\nHexo 仓库名格式：`GitHub_Name.github.io`（固定死了），其他默认即可。\n\n![Hexo GitHub 部署仓库示例](http://yongz-typro.oss-cn-beijing.aliyuncs.com/website/20250821161828954.jpg)\n\n#### 3.2.2 配置 Git\n\n配置 git 用户名，最好与 github 保持一致：\n\n```shell\ngit config --global user.name \"Y0n9zh\"\n```\n\n配置 git 邮箱：\n\n```shell\ngit config --global user.email \"Y0n9zh@gmail.com\"\n```\n\n#### 3.2.3 配置 Hexo\n\n打开 hexo-blog 目录下的 `_config.yml` 文件，配置如下内容：\n\n```yaml\ndeploy:\n  type: 'git'\n  repo: 'https://github.com/Y0n9zh/Y0n9zh.github.io.git' # GitHub 仓库地址\n  branch: main # 主分支\n```\n\n#### 3.2.4 推送 GitHub\n\n安装 hexo 和 github 部署的插件：\n\n```shell\nnpm install hexo-deployer-git --save\n```\n\n一条命令推送（如果没做免密，会要求输入 GitHub 账号密码）：\n\n```shell\nhexo clean ; hexo generate ; hexo deploy\n```\n\n![Hexo GitHub 推送仓库示例](http://yongz-typro.oss-cn-beijing.aliyuncs.com/website/20250821161828956.jpg)\n\n选择用于展示的分支：\n\n![GitHub 选择用于展示的分支](http://yongz-typro.oss-cn-beijing.aliyuncs.com/website/20250821161828953.jpg)\n\n访问地址：[https://y0n9zh.github.io/](https://y0n9zh.github.io/)\n\n![Hexo GitHub Page 示例](http://yongz-typro.oss-cn-beijing.aliyuncs.com/website/20250821161828955.jpg)\n\n## 4 Hexo 配置文件说明\n\n### 4.1 核心配置与依赖相关\n\n|  **文件/文件夹**  |                           **说明**                           |\n| :---------------: | :----------------------------------------------------------: |\n|    _config.yml    | Hexo 博客的**全局配置文件**，用于设置站点标题、描述、作者、部署方式、主题相关配置等核心内容，是整个博客项目的关键配置入口。 |\n|   package.json    |                         项目依赖的包                         |\n| package-lock.json |                     锁定依赖包的具体版本                     |\n|   node_modules    | 存放项目依赖的 Node.js 包，执行 `npm install` 时下载的各类包（如 Hexo 本身、各种插件 ）都在这里，一般无需手动操作该文件夹，但项目运行依赖它。 |\n\n### 4.2 博客内容与生成相关\n\n|    **文件/文件夹**    |                           **说明**                           |\n| :-------------------: | :----------------------------------------------------------: |\n|       scaffolds       | 脚手架（模板）目录，里面是新建文章、页面等时的默认模板文件，可自定义模板格式，让每次新建内容都自带固定的前置内容。 |\n|        source         | 存放博客的**原始内容**，比如 Markdown 格式的博客文章、页面文件，以及图片、音频等静态资源，Hexo 会读取这里的内容进行处理生成静态页面。 |\n|        public         | Hexo 执行 `hexo generate` 命令后，生成的**静态网页文件**会存放在这里，这些就是最终部署到服务器上的内容，一般无需手动修改，由 Hexo 自动生成。 |\n|        themes         | 存放博客使用的**主题**，每个主题是一个独立文件夹，主题里包含布局文件、样式文件、脚本文件等，可更换、自定义主题来改变博客外观和功能。 |\n| _config.landscape.yml | 如果使用 `landscape` 主题（Hexo 默认主题 ），这是该主题的**专属配置文件**，用于覆盖主题默认设置。 |\n\n### 4.3 辅助与部署相关\n\n| **文件/文件夹** |                           **说明**                           |\n| :-------------: | :----------------------------------------------------------: |\n|   .deploy_git   | 当使用 `hexo-deployer-git` 部署插件，执行 `hexo deploy` 时，可能会生成的临时目录，用于存放待推送到远程仓库的文件，和部署流程相关，一般无需手动干预。 |\n|     .github     | 用于存放 GitHub 相关的配置，若有自动化部署、CI/CD 需求，会在这里配置脚本。 |\n|   .gitignore    | Git 版本控制的忽略文件配置，指定哪些文件或文件夹不需要被 Git 跟踪，避免把冗余文件提交到 GitHub 仓库。 |\n|     db.json     | Hexo 用于**缓存内容数据**，记录文章、页面的元信息，辅助 Hexo 快速生成静态页面，一般不用手动修改，Hexo 会自动维护。 |\n\n## 5 Butterfly 主题安装\n\nHexo 官方主题地址：[https://hexo.io/themes/](https://hexo.io/themes/)\n\nButterfly 主题地址：[https://github.com/jerryc127/hexo-theme-butterfly](https://github.com/jerryc127/hexo-theme-butterfly)\n\nButterfly 配置教程地址：<https://butterfly.js.org/>\n\n安装命令如下（Git）：\n\n```shell\ngit clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly\n```\n\n安装相关插件：\n\n```shell\nnpm install hexo-renderer-pug hexo-renderer-stylus --save\n```\n\n修改 `_config.yml` 配置文件：\n\n```yaml\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: butterfly\n```\n\n查看结果：\n\n![Hexo Butterfly 初始页面](http://yongz-typro.oss-cn-beijing.aliyuncs.com/website/20250821161828958.jpg)\n\n## 6 Butterfly 主题配置\n\n### 6.1 快速编辑 Butterfly 配置\n\n将 `themes/butterfly/_config.yml` 复制一份到 hexo-blog 目录下，并重命名为 `_config.butterfly.yml`，后续可以直接修改该文件内容：\n\n```shell\n# 复制 butterfly 配置文件\ncp themes/butterfly/_config.yml _config.butterfly.yml\n\n# 删除 landscape 默认的配置文件\nrm -f _config.landscape.yml\n```\n\n### 6.2 Front-matter 参数配置\n\nFront-matter 是 markdown 文件最上方以 `---` 分隔的区域，用于定义文章的元数据。\n\n- Page Front-matter：用于页面配置\n- Post Front-matter：用于文章页配置\n\n书写示例如下（Hexo 官方）：\n\n```yaml\n---\ntitle: Hello World\ndate: 2013/7/13 20:46:25\n---\n```\n\n通常而言，一个 Page Front-matter 需要包含如下几部分内容：\n\n| 参数  |                 解释                 |\n| :---: | :----------------------------------: |\n| title |               页面标题               |\n| date  |             页面创建日期             |\n| type  | 标签、分类和友情链接三个页面需要配置 |\n\n而 Post Front-matter 就比较多了：\n\n|    参数    |               解释               |\n| :--------: | :------------------------------: |\n|   title    |             页面标题             |\n|    date    |           页面创建日期           |\n|  updated   | 页面更新日期（太麻烦了我也没加） |\n| categories |    文章分类（建议不超过两个）    |\n|  top_img   |           文章顶部图片           |\n\nPost Front-matter 示例如下：\n\n```yaml\n---\ntitle: Hexo 博客搭建\ndate: 2025-08-20 20:23:04\ncategories: \n\t- Hexo\ntop_img: ./img/post_img/page_img1.jpg\n---\n```\n\n### 6.3 创建分类页\n\n> 注意：这里之所以不创建标签页和友情链接页是因为我认为后期管理太麻烦了。\n\n在 hexo-blog 目录下，执行如下命令：\n\n```shell\n# 创建分类页\nhexo new page categories\n```\n\n将生成的 index.md 文件内容进行修改：\n\n```shell\n# source/categories/index.md\n---\ntitle: 文章分类\ndate: 2025-08-20 19:09:44\ntype: \"categories\"\n---\n```\n\n### 6.4 配置 404 页面\n\nButterfly 主题内置了一个简单的 404 页面，可在设置中开启：\n\n```yaml\n# A simple 404 page\nerror_404:\n  enable: true\n  subtitle: 'Page Not Found'\n  background: /img/error-page.jpg\n```\n\n这里有两点需要注意：\n\n- 本地预览时，访问出错是不会跳转到 404 页面的。\n- 如需本地访问，请访问：<http://localhost:4000/404.html>\n\n![Hexo 404 页面](http://yongz-typro.oss-cn-beijing.aliyuncs.com/website/20250821161828957.jpg)\n\n### 6.5 修改默认配置文件\n\n> 注意：仅供参考。\n\n内容如下：\n\n```yaml\n# --------------------------------------\n# 导航设置\n# --------------------------------------\n\nnav:\n  # 导航栏 Logo 图片\n  logo:\n  # 是否显示标题\n  display_title: true\n  # 是否在滚动时显示文章标题\n  display_post_title: true\n  # 是否固定导航栏\n  fixed: true\n\nmenu:\n  首页: / || fas fa-home\n  # hide 表示这是一个可展开/折叠的菜单\n  文章 || fas fa-archive || hide:\n    分类: /categories/ || fas fa-folder-open\n    归档: /archives/ || fas fa-archive\n  ......\n\n# --------------------------------------\n# 代码块设置\n# --------------------------------------\n\ncode_blocks:\n  # 代码块主题: darker / pale night / light / ocean / false\n  theme: light\n  # 是否使用 Mac 风格\n  macStyle: true\n  # 代码块高度限制（单位: px）\n  height_limit: false\n  # 是否自动换行\n  word_wrap: false\n  \n  # 工具栏\n  # 是否显示复制按钮\n  copy: true\n  # 是否显示语言标签\n  language: true\n  # true: 收缩代码块 | false: 展开代码块 | none: 展开代码块并隐藏按钮\n  shrink: false\n  # 是否显示全屏显示代码块按钮\n  fullpage: false\n\n# 社交媒体链接\nsocial:\n  fas fa-envelope: mailto:y0n9zh@gmail.com || Email || '#000000'\n  fa-solid fa-paperclip: https://www.yuque.com/yongz || Yueque || '#000000'\n  \n# --------------------------------------\n# 图片设置\n# --------------------------------------\n\n# 网站的 favicon 图标，在 source 目录下创建一个 img 文件夹\nfavicon: ./img/favicon.ico\n\n# 头像设置\navatar:\n  # 头像图片链接\n  img: ./img/avatar.jpg\n  # 是否启用头像效果\n  effect: false\n\n# 禁用所有横幅图片\ndisable_top_img: false\n\n# 如果页面未设置横幅，则显示默认的横幅图片（就是访问网站是最大的那张图）\ndefault_top_img: ./img/default_top_img.jpg\n\n# 主页的横幅图片\nindex_img:\n\n# 归档页的横幅图片\narchive_img:\n\n# 注意: 是标签页（单个标签），不是标签页面（所有标签）\ntag_img:\n\n# 标签页的横幅图片，可以为每个标签设置横幅图片\n# 格式:\n#  - 标签名: 图片链接\ntag_per_img:\n\n# 注意: 是分类页（单个分类），不是分类页面（所有分类）\ncategory_img:\n\n# 分类页的横幅图片，可以为每个分类设置横幅图片\n# 格式:\n#  - 分类名: 图片链接\ncategory_per_img:\n\n# 页脚的背景图片\nfooter_img: false\n\n# 网站背景\n# 可以设置为颜色或图片\n# 图片格式: url(http://xxxxxx.com/xxx.jpg)\nbackground:\n\n# 封面设置\ncover:\n  # 是否禁用封面\n  index_enable: true\n  aside_enable: true\n  archives_enable: true\n  # 主页封面的位置\n  # 选择: left/right/both\n  position: both\n  # 当未设置封面时，显示默认封面\n  default_cover:\n    - ./img/default_cover.jpg\n    \n# 替换损坏的图片\nerror_img:\n  # 友链页面的错误图片\n  flink: ./img/404.jpg\n  # 文章页面的错误图片\n  post_page: ./img/404.jpg\n\n# 简单的 404 页面\nerror_404:\n  enable: true\n  subtitle: 'Page Not Found'\n  background: ./img/404.jpg\n  \n# 文章元数据设置\npost_meta:\n  # 主页页面\n  page:\n    # 日期类型: created / updated / both\n    date_type: created\n    # 日期格式: date / relative\n    date_format: date\n    # 是否显示分类\n    categories: true\n    # 是否显示标签\n    tags: false\n    # 是否显示文字标签\n    label: false\n  # 文章页面\n  post:\n    # 元数据位置: left / center\n    position: center\n    # 日期类型: created / updated / both\n    date_type: created\n    # 日期格式: date / relative\n    date_format: date\n    # 是否显示分类\n    categories: true\n    # 是否显示标签\n    tags: false\n    # 是否显示文字标签\n    label: false\n\n# --------------------------------------\n# 首页设置\n# --------------------------------------\n\n# 首页头图的设置\n# 默认: 头图全屏，站点信息在中间\n# 站点信息的位置，例如: 300px/300em/300rem/10%\nindex_site_info_top:\n# 头图的高度，例如: 300px/300em/300rem\nindex_top_img_height:\n\n# 首页的副标题设置\nsubtitle:\n  # 是否启用副标题\n  enable: true\n  # 是否启用打字机效果\n  effect: true\n  # 自定义 typed.js\n  # https://github.com/mattboldt/typed.js/#customization\n  typed_option:\n  # 来源 - 调用第三方服务 API（仅限中文）\n  # 它将首先显示来源，然后显示副标题内容\n  # 选择: false/1/2/3\n  # false - 禁用此功能\n  # 1 - hitokoto.cn\n  # 2 - yijuzhan.com\n  # 3 - jinrishici.com\n  source: 3\n  # 如果关闭打字机效果，副标题将仅显示 sub 的第一行内容\n  sub:\n\n# 首页文章佈局\n# 1: 行佈局\n# 2: 列布局\nindex_layout: 1\n\n# 在首页显示文章简介\n# 1: 描述\n# 2: 两者（如果存在描述，将显示描述，否则显示自动摘要）\n# 3: 自动摘要（默认）\n# false: 不显示文章简介\nindex_post_content:\n  method: 3\n  # 如果设置 method 为 2 或 3，需要配置长度\n  length: 500\n\n# --------------------------------------\n# 文章设置\n# --------------------------------------\n\ntoc:\n  # 是否在文章中显示目录\n  post: true\n  # 是否在页面中显示目录\n  page: false\n  # 是否显示目录编号\n  number: true\n  # 是否默认展开目录\n  expand: true\n  # 是否使用简洁风格（仅适用于文章）\n  style_simple: false\n  # 是否显示滚动百分比\n  scroll_percent: true\n\npost_copyright:\n  # 是否启用版权声明\n  enable: false\n  # 是否进行文章 URL 解码\n  decode: false\n  # 作者链接\n  author_href: Yongz丶\n  # 许可证类型\n  license: CC BY-NC-SA 4.0\n  # 许可证链接\n  license_url: https://creativecommons.org/licenses/by-nc-sa/4.0/\n\n# 贊助/打赏\nreward:\n  # 是否启用打赏\n  enable: false\n  # 打赏案例文本\n  text:\n  QR_code:\n    # - img: /img/wechat.jpg\n    #   link:\n    #   text: 微信\n    # - img: /img/alipay.jpg\n    #   link:\n    #   text: 支付宝\n\n# 文章编辑\n# 轻鬆在线浏览和编辑博客源代码\npost_edit:\n  # 是否启用在线编辑\n  enable: false\n  # url: https://github.com/用户名/仓库名/edit/分支名/子目录名/\n  # 例如: https://github.com/jerryc127/butterfly.js.org/edit/main/source/\n  url:\n\n# 相关文章\nrelated_post:\n  # 是否显示相关文章\n  enable: true\n  # 显示的文章数量\n  limit: 6\n  # 选择: created / updated\n  date_type: created\n  \n# 选择: 1 / 2 / false\n# 1: “下一篇文章”将链接到旧文章\n# 2: “下一篇文章”将链接到新文章\n# false: 禁用分页\npost_pagination: 1\n\n# 显示文章过期通知\nnoticeOutdate:\n  # 是否启用过期通知\n  enable: false\n  # 样式: simple / flat\n  style: flat\n  # 多少天后显示通知\n  limit_day: 365\n  # 位置: top / bottom\n  position: top\n  message_prev: 已经过了\n  message_next: 天自上次更新，文章内容可能已过时。\n\n# --------------------------------------\n# 页脚设置\n# --------------------------------------\nfooter:\n  # 页脚导航栏配置\n  nav:\n  owner:\n    # 是否启用所有者显示\n    enable: true\n    # 网站创建年份\n    since: 2023\n  # 自定义文本\n  custom_text:\n  # 主题和框架的版权声明\n    <a href=\"https://beian.miit.gov.cn/#/Integrated/index\"  style=\"color:white\" target=\"_blank\">闽ICP备2024058441号-1</a> | 免责声明：请勿利用文章内的相关技术从事非法测试，如因此产生的一切不良后果与本人无关\n  copyright:\n    enable: true\n    # 显示版本号\n    version: true\n\n# --------------------------------------\n# 侧边栏设置\n# --------------------------------------\n\naside:\n  # 是否启用侧边栏\n  enable: true\n  # 是否默认隐藏侧边栏\n  hide: false\n  # 是否在右下角显示隐藏侧边栏的按钮\n  button: true\n  # 移动设备上是否启用侧边栏\n  mobile: true\n  # 侧边栏位置：left / right\n  position: right\n  display:\n    # 归档页面是否显示侧边栏\n    archive: true\n    # 标签页面是否显示侧边栏\n    tag: true\n    # 分类页面是否显示侧边栏\n    category: true\n  card_author:\n    # 是否显示作者信息卡片\n    enable: true\n    # 作者描述\n    description:\n    button:\n      # 是否显示按钮\n      enable: true\n      # 按钮图标\n      icon: fab fa-github\n      # 按钮文本\n      text: Follow Me\n      # 按钮链接\n      link: https://github.com/Y0n9zh?tab=repositories\n  card_announcement:\n    # 是否显示公告卡片\n    enable: true\n    # 公告内容\n    content: 不定时分享一些内容...\n  card_recent_post:\n    # 是否显示最近文章卡片\n    enable: true\n    # 显示文章数量，0 表示显示所有\n    limit: 5\n    # 排序方式：date / updated\n    sort: date\n    sort_order:\n  card_newest_comments:\n    # 是否显示最新评论卡片\n    enable: false\n    sort_order:\n    # 显示评论数量\n    limit: 6\n    # 单位：分钟，保存数据到 localStorage\n    storage: 10\n    # 是否显示头像\n    avatar: true\n  card_categories:\n    # 是否显示分类卡片\n    enable: true\n    # 显示分类数量，0 表示显示所有\n    limit: 8\n    # 选择：none / true / false\n    expand: none\n    sort_order:\n  card_tags:\n    # 是否显示标签卡片\n    enable: false\n    # 显示标签数量，0 表示显示所有\n    limit: 40\n    # 是否启用颜色\n    color: false\n    # 标签排序方式：random/name/length\n    orderby: random\n    # 排序顺序：1 表示升序，-1 表示降序\n    order: 1\n    sort_order:\n  card_archives:\n    # 是否显示归档卡片\n    enable: true\n    # 归档类型：monthly / yearly\n    type: monthly\n    # 日期格式，例如：YYYY年MM月\n    format: MMMM YYYY\n    # 排序顺序：1 表示升序，-1 表示降序\n    order: -1\n    # 显示归档数量，0 表示显示所有\n    limit: 8\n    sort_order:\n  card_post_series:\n    # 是否显示系列文章卡片\n    enable: true\n    # 标题显示系列名称\n    series_title: false\n    # 排序方式：title 或 date\n    orderBy: 'date'\n    # 排序顺序：1 表示升序，-1 表示降序\n    order: -1\n  card_webinfo:\n    # 是否显示网站信息卡片\n    enable: true\n    # 是否显示文章数量\n    post_count: true\n    # 是否显示最后推送日期\n    last_push_date: true\n    sort_order:\n    # 发佈日期与当前日期的时间差\n    # 格式：Month/Day/Year Time 或 Year/Month/Day Time\n    # 如果不启用此功能，请留空\n    runtime_date: 8/29/2023 00:00:00\n\n# --------------------------------------\n# 右下角按钮设置\n# --------------------------------------\n\n# 右下角按钮与底部的距离（默认单位：px）\nrightside_bottom:\n\n# 简繁转换设置\ntranslate:\n  # 是否启用简繁转换\n  enable: false\n  # 按钮文本\n  default: 繁\n  # 网站语言（1 - 繁体中文 / 2 - 简体中文）\n  defaultEncoding: 2\n  # 转换延迟\n  translateDelay: 0\n  # 按钮在简体中文时的文本\n  msgToTraditionalChinese: '繁'\n  # 按钮在繁体中文时的文本\n  msgToSimplifiedChinese: '简'\n\n# 閲读模式\nreadmode: true\n\n# 暗黑模式设置\ndarkmode:\n  # 是否启用暗黑模式\n  enable: true\n  # 切换暗黑/明亮模式的按钮\n  button: true\n  # 是否自动切换暗黑/明亮模式\n  # autoChangeMode: 1  跟随系统设置，如果系统不支持暗黑模式，则在晚上 6 点到早上 6 点之间切换暗黑模式\n  # autoChangeMode: 2  在晚上 6 点到早上 6 点之间切换暗黑模式\n  # autoChangeMode: false  不自动切换\n  autoChangeMode: false\n  # 设置明亮模式时间，值在 0 到 24 之间。如果未设置，默认值为 6 和 18\n  start:\n  end:\n\n# 在返回顶部按钮中显示滚动百分比\nrightside_scroll_percent: false\n\n# 不要修改以下设置，除非你知道它们的工作原理\n# 选择：readmode,translate,darkmode,hideAside,toc,chat,comment\n# 不要重复相同的值\nrightside_item_order:\n  # 是否启用右侧项目顺序\n  enable: false\n  # 隐藏的默认项目：readmode,translate,darkmode,hideAside\n  hide:\n  # 显示的默认项目：toc,chat,comment\n  show:\n\n# 右下角配置按钮动画效果\nrightside_config_animation: true\n\n# --------------------------------------\n# 全局设置\n# --------------------------------------\n\n# 锚点设置\nanchor:\n  # 滚动时，URL 将根据标题 ID 更新\n  auto_update: false\n  # 点击标题滚动并更新锚点\n  click_to_scroll: false\n  \n# 图片标题\nphotofigcaption: false\n\n# 复制设置\ncopy:\n  # 是否启用复制功能\n  enable: true\n  # 在复制的内容后添加版权信息\n  copyright:\n    enable: false\n    # 当复制字符数超过 limit_count 时添加版权信息\n    limit_count: 150\n    \n# 需要安装 hexo-wordcount 插件\nwordcount:\n  # 是否启用字数统计\n  enable: true\n  # 在文章元信息中显示字数统计\n  post_wordcount: true\n  # 在文章元信息中显示閲读时间\n  min2read: true\n  # 在侧边栏网站信息中显示总字数\n  total_wordcount: true\n\n# 不蒜子 PV / UV 统计\nbusuanzi:\n  # 网站 UV 统计\n  site_uv: true\n  # 网站 PV 统计\n  site_pv: true\n  # 页面 PV 统计\n  page_pv: true\n  \n# --------------------------------------\n# 数学公式设置\n# --------------------------------------\n\n# 关于 per_page\n# 如果设置为 true，将在每个页面加载 mathjax/katex 脚本\n# 如果设置为 false，将根据你的设置加载 mathjax/katex 脚本（在页面的 front-matter 中添加 'mathjax: true' 或者 'katex: true'）\nmath:\n  # 选择：mathjax, katex\n  # 如果不需要数学公式，保持为空\n  use:\n  per_page: true\n  hide_scrollbar: false\n\n  mathjax:\n    # 启用上下文菜单\n    enableMenu: true\n    # 选择：all / ams / none，这控制是否对公式编号以及如何编号\n    tags: none\n\n  katex:\n    # 启用复制 KaTeX 公式\n    copy_tex: false\n\n# --------------------------------------\n# 搜索设置\n# --------------------------------------\n\nsearch:\n  # 选择：algolia_search / local_search / docsearch\n  # 如果不需要搜索功能，保持为空\n  use: local_search\n  # placeholder:\n\n  # Algolia 搜索\n  algolia_search:\n    # 每页搜索结果数量\n    hitsPerPage: 6\n\n  # 本地搜索\n  local_search:\n    # 页面加载时预加载搜索数据\n    preload: true\n    # 每篇文章显示的顶部 n 个搜索结果，设置为 -1 显示所有结果\n    top_n_per_article: 1\n    # 将 HTML 字符串反转义为可读内容\n    unescape: false\n    CDN:\n\n  # Docsearch\n  # https://docsearch.algolia.com/\n  docsearch:\n    appId:\n    apiKey:\n    indexName:\n    option:\n\n# --------------------------------------\n# 分享系统\n# --------------------------------------\n\nshare:\n  # 选择：sharejs / addtoany\n  # 如果不需要分享功能，保持为空\n  use: sharejs\n\n  # Share.js\n  # https://github.com/overtrue/share.js\n  sharejs:\n    sites: facebook,twitter,wechat,weibo,qq\n\n  # AddToAny\n  # https://www.addtoany.com/\n  addtoany:\n    item: facebook,twitter,wechat,sina_weibo,facebook_messenger,email,copy_link\n\n# --------------------------------------\n# 评论系统\n# --------------------------------------\n\ncomments:\n  # 最多两个评论系统，第一个将作为默认显示\n  # 如果不需要评论功能，保持为空\n  # 选择：Disqus/Disqusjs/Livere/Gitalk/Valine/Waline/Utterances/Facebook Comments/Twikoo/Giscus/Remark42/Artalk\n  # 两个评论系统的格式：Disqus,Waline\n  use:\n  # 按钮旁边显示评论系统名称\n  text: true\n  # 懒加载：评论系统将在评论元素进入浏览器视口时加载\n  # 如果设置为 true，评论计数将无效\n  lazyload: true\n  # 在文章顶部图片中显示评论计数\n  count: false\n  # 在主页显示评论计数\n  card_post_count: false\n\n# Disqus 评论插件配置\n# 官方文档：https://disqus.com/\ndisqus:\n  # Disqus 的 shortname\n  shortname:\n  # 最新评论小部件的 API 密钥\n  apikey:\n\n# 使用 Disqus API 渲染评论的替代方案\n# 官方文档：https://github.com/SukkaW/DisqusJS\ndisqusjs:\n  # Disqus 的 shortname\n  shortname:\n  # API 密钥\n  apikey:\n  # 其他可选配置\n  option:\n\n# Livere 评论插件配置\n# 官方文档：https://www.livere.com/\nlivere:\n  # Livere 的用户 ID\n  uid:\n\n# Gitalk 评论插件配置\n# 官方文档：https://github.com/gitalk/gitalk\ngitalk:\n  # GitHub 应用的客户端 ID\n  client_id:\n  # GitHub 应用的客户端密钥\n  client_secret:\n  # 存储评论的仓库名称\n  repo:\n  # 仓库拥有者的用户名\n  owner:\n  # 管理员用户名列表\n  admin:\n  # 其他可选配置\n  option:\n\n# Valine 评论插件配置\n# 官方文档：https://valine.js.org\nvaline:\n  # LeanCloud 应用的 appId\n  appId:\n  # LeanCloud 应用的 appKey\n  appKey:\n  # 评论者头像样式\n  avatar: monsterid\n  # 该配置适用于国内自定义域名用户，海外版本将自动检测（无需手动填写）\n  serverURLs:\n  # 评论框背景图片\n  bg:\n  # 使用 Valine 的访客计数作为页面的访客量\n  visitor: false\n  # 其他可选配置\n  option:\n\n# Waline 评论插件配置，一个简单的评论系统，基于 Valine 开发，支持后端\n# 官方文档：https://waline.js.org/\nwaline:\n  # 服务器 URL\n  serverURL:\n  # 评论框背景图片\n  bg:\n  # 使用 Waline 的访客计数作为页面的访客量\n  pageview: false\n  # 其他可选配置\n  option:\n\n# Utterances 评论插件配置\n# 官方文档：https://utteranc.es/\nutterances:\n  # 存储评论的 GitHub 仓库\n  repo:\n  # 问题映射方式，可选值：pathname/url/title/og:title\n  issue_term: pathname\n  # 浅色主题，可选值：github-light\n  light_theme: github-light\n  # 深色主题，可选值：photon-dark\n  dark_theme: photon-dark\n\n# Facebook 评论插件配置\n# 官方文档：https://developers.facebook.com/docs/plugins/comments/\nfacebook_comments:\n  # 应用 ID\n  app_id:\n  # 用户 ID，可选\n  user_id:\n  # 每页显示评论数\n  pageSize: 10\n  # 评论排序方式，可选值：social / time / reverse_time\n  order_by: social\n  # 语言设置\n  lang: zh_TW\n\n# Twikoo 评论插件配置\n# 官方文档：https://github.com/imaegoo/twikoo\ntwikoo:\n  # 环境 ID\n  envId:\n  # 区域\n  region:\n  # 使用 Twikoo 的访客计数作为页面的访客量\n  visitor: false\n  # 其他可选配置\n  option:\n\n# Giscus 评论插件配置\n# 官方文档：https://giscus.app/\ngiscus:\n  # 仓库地址\n  repo:\n  # 仓库 ID\n  repo_id:\n  # 分类 ID\n  category_id:\n  # 主题配置，light 为浅色主题，dark 为深色主题\n  theme:\n    light: light\n    dark: dark\n  # 其他可选配置\n  option:\n\n# Remark42 评论插件配置\n# 官方文档：https://remark42.com/docs/configuration/frontend/\nremark42:\n  # 服务器地址\n  host:\n  # 站点 ID\n  siteId:\n  # 其他可选配置\n  option:\n\n# Artalk 评论插件配置\n# 官方文档：https://artalk.js.org/guide/frontend/config.html\nartalk:\n  # 服务器地址\n  server:\n  # 站点名\n  site:\n  # 使用 Artalk 的访客计数作为页面的访客量\n  visitor: false\n  # 其他可选配置\n  option:\n\n# --------------------------------------\n# 聊天服务配置\n# --------------------------------------\n\nchat:\n  # 聊天服务类型，可选值：chatra/tidio/crisp，如果不需要聊天功能则留空\n  use:\n  # 推荐使用聊天按钮，会在网站右下角创建一个按钮，并隐藏原始按钮\n  rightside_button: false\n  # 原始聊天按钮在向上滚动时显示，向下滚动时隐藏\n  button_hide_show: false\n\n# Chatra 聊天服务配置\n# 官方网站：https://chatra.io/\nchatra:\n  # Chatra 服务 ID\n  id:\n\n# Tidio 聊天服务配置\n# 官方网站：https://www.tidio.com/\ntidio:\n  # Tidio 公钥\n  public_key:\n\n# Crisp 聊天服务配置\n# 官方网站：https://crisp.chat/en/\ncrisp:\n  # Crisp 网站 ID\n  website_id:\n\n# --------------------------------------\n# 分析服务配置\n# --------------------------------------\n\n# 百度统计配置\n# 官方网站：https://tongji.baidu.com/web/welcome/login\nbaidu_analytics:\n\n# 谷歌分析配置\n# 官方网站：https://analytics.google.com/analytics/web/\ngoogle_analytics:\n\n# Cloudflare 分析配置\n# 官方网站：https://www.cloudflare.com/zh-tw/web-analytics/\ncloudflare_analytics:\n\n# Microsoft Clarity 分析配置\n# 官方网站：https://clarity.microsoft.com/\nmicrosoft_clarity:\n\n# https://umami.is/\numami_analytics:\n  enable: false\n  # 给自託管的 Umami 实例配置主机名\n  serverURL:\n  website_id:\n  option:\n  UV_PV:\n    site_uv: false\n    site_pv: false\n    page_pv: false\n    # Umami Cloud (API key) / self-hosted Umami (token)\n    token:\n\n# https://www.googletagmanager.com/\ngoogle_tag_manager:\n  tag_id:\n  # 可选配置\n  domain:\n\n# --------------------------------------\n# 广告配置\n# --------------------------------------\n\n# Google Adsense 广告配置\ngoogle_adsense:\n  # 是否启用\n  enable: false\n  # 是否自动投放广告\n  auto_ads: true\n  # 广告脚本 URL\n  js: https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\n  # 客户 ID\n  client:\n  # 是否启用页面级广告\n  enable_page_level_ads: true\n\n# 手动插入广告配置，如果不需要广告则留空\nad:\n  # 在首页每三个帖子后插入广告\n  index:\n  # 在侧边栏插入广告\n  aside:\n  # 在文章分页前插入广告\n  post:\n\n# --------------------------------------\n# 站点验证配置\n# --------------------------------------\n\nsite_verification:\n  # 示例：\n  # - name: google-site-verification\n  #   content: xxxxxx\n  # - name: baidu-site-verification\n  #   content: xxxxxxx\n\n# --------------------------------------\n# 美化 / 效果\n# --------------------------------------\n\n# 主题颜色自定义\n# 注意：颜色值必须用双引号，如 \"#000\"，否则可能会导致错误！\n\n# 主题颜色配置\n# theme_color:\n#   是否启用主题颜色\n#   enable: true\n#   主颜色\n#   main: \"#49B1F5\"\n#   分页器颜色\n#   paginator: \"#00c4b6\"\n#   按钮悬停颜色\n#   button_hover: \"#FF7242\"\n#   文本选择颜色\n#   text_selection: \"#00c4b6\"\n#   链接颜色\n#   link_color: \"#99a9bf\"\n#   元数据颜色\n#   meta_color: \"#858585\"\n#   水平线颜色\n#   hr_color: \"#A4D8FA\"\n#   代码前景色\n#   code_foreground: \"#F47466\"\n#   代码背景色\n#   code_background: \"rgba(27, 31, 35, .05)\"\n#   目录颜色\n#   toc_color: \"#00c4b6\"\n#   引用块填充颜色\n#   blockquote_padding_color: \"#49b1f5\"\n#   引用块背景颜色\n#   blockquote_background_color: \"#49b1f5\"\n#   滚动条颜色\n#   scrollbar_color: \"#49b1f5\"\n#   浅色模式下的主题颜色\n#   meta_theme_color_light: \"ffffff\"\n#   深色模式下的主题颜色\n#   meta_theme_color_dark: \"#0d0d0d\"\n\n# 分类和标签页面的用户界面设置\n# 选择：index - 与主页 UI 相同 / default - 与归档 UI 相同\n# 留空或设置为 index\ncategory_ui:\ntag_ui:\n\n# 拉伸行使每行宽度相等\ntext_align_justify: false\n\n# 为页眉和页脚添加遮罩\nmask:\n  header: true\n  footer: true\n  \n# 加载动画\npreloader:\n  # 是否启用加载动画\n  enable: false\n  # 资源\n  # 1. 全屏加载\n  # 2. 进度条\n  source: 1\n  # pace 主题 (参见 https://codebyzach.github.io/pace/)\n  pace_css_url:\n\n# 页面过渡效果\nenter_transitions: true\n\n# 默认显示模式 - light (默认) / dark\ndisplay_mode: light\n\n# 美化文章内容的配置\nbeautify:\n  # 是否启用美化\n  enable: false\n  # 指定美化的范围 (site 或 post)\n  field: post\n  # 指定标题前缀图标，如 '\\f0c1'\n  title-prefix-icon:\n  # 指定标题前缀图标的颜色，如 '#F47466'\n  title-prefix-icon-color:\n\n# 全局字体设置\n# 除非您知道它们的工作原理，否则不要修改以下设置\nfont:\n  global-font-size:\n  code-font-size:\n  font-family:\n  code-font-family:\n\n# 网站标题和副标题的字体设置\nblog_title_font:\n  font_link:\n  font-family:\n\n# 分隔符图标的设置\nhr_icon:\n  # 是否启用分隔符图标\n  enable: true\n  # Font Awesome 图标的 unicode 值，如 '\\3423'\n  icon:\n  icon-top:\n\n# 打字机效果\n# https://github.com/disjukr/activate-power-mode\nactivate_power_mode:\n  # 是否启用打字机效果\n  enable: false\n  # 是否启用彩色效果\n  colorful: true\n  # 是否启用震动效果\n  shake: true\n  # 是否在移动设备上启用\n  mobile: false\n\n# 打字机效果\n# https://github.com/disjukr/activate-power-mode\nactivate_power_mode:\n  # 是否启用打字机效果\n  enable: false\n  # 是否启用彩色效果\n  colorful: true\n  # 是否启用震动效果\n  shake: true\n  # 是否在移动设备上启用\n  mobile: false\n\n# 背景效果\n# --------------------------------------\n\n# canvas_ribbon\n# 参见: https://github.com/hustcc/ribbon.js\ncanvas_ribbon:\n  # 是否启用 canvas_ribbon\n  enable: false\n  # ribbon 的大小\n  size: 150\n  # ribbon 的不透明度 (0 ~ 1)\n  alpha: 0.6\n  zIndex: -1\n  # 是否点击更改颜色\n  click_to_change: false\n  # 是否在移动设备上启用\n  mobile: false\n\n# Fluttering Ribbon\ncanvas_fluttering_ribbon:\n  # 是否启用 Fluttering Ribbon\n  enable: false\n  # 是否在移动设备上启用\n  mobile: false\n\n# canvas_nest\n# https://github.com/hustcc/canvas-nest.js\ncanvas_nest:\n  # 是否启用 canvas_nest\n  enable: false\n  # 线条颜色，默认: '0,0,0'; RGB 值: (R,G,B).(注意: 使用 ',' 分隔.)\n  color: '0,0,255'\n  # 线条的不透明度 (0~1)\n  opacity: 0.7\n  # 背景的 z-index 属性\n  zIndex: -1\n  # 线条数量\n  count: 99\n  # 是否在移动设备上启用\n  mobile: false\n\n# 鼠标点击效果: 烟花\nfireworks:\n  # 是否启用烟花效果\n  enable: false\n  zIndex: 9999\n  # 是否在移动设备上启用\n  mobile: false\n\n# 鼠标点击效果: 心形符号\nclick_heart:\n  # 是否启用心形符号效果\n  enable: false\n  # 是否在移动设备上启用\n  mobile: false\n\n# 鼠标点击效果: 文字\nclickShowText:\n  # 是否启用文字效果\n  enable: false\n  text:\n    # - I\n    # - LOVE\n    # - YOU\n  fontSize: 15px\n  # 是否随机显示文字\n  random: false\n  # 是否在移动设备上启用\n  mobile: false\n\n# --------------------------------------\n# 灯箱设置\n# --------------------------------------\n\n# 选择: fancybox / medium_zoom\n# https://github.com/francoischalifour/medium-zoom\n# https://fancyapps.com/fancybox/\n# 如果不需要灯箱效果，请留空\nlightbox:\n\n# --------------------------------------\n# 标签外挂设置\n# --------------------------------------\n\n# 系列\nseries:\n  # 是否启用系列\n  enable: false\n  # 按标题或日期排序\n  orderBy: 'title'\n  # 排序方式。1, asc 为升序; -1, desc 为降序\n  order: 1\n  # 是否显示编号\n  number: true\n\n# ABCJS - ABC 音乐符号插件\n# https://github.com/paulrosen/abcjs\nabcjs:\n  # 是否启用 ABCJS\n  enable: false\n  # 是否每页启用\n  per_page: true\n\n# Mermaid\n# https://github.com/mermaid-js/mermaid\nmermaid:\n  # 是否启用 Mermaid\n  enable: false\n  # 使用代码块编写 Mermaid 图表\n  code_write: false\n  # 内置主题: default / forest / dark / neutral\n  theme:\n    light: default\n    dark: dark\n\n# chartjs\n# 参见 https://www.chartjs.org/docs/latest/\nchartjs:\n  enable: false\n  # 除非你瞭解它们的工作原理，否则不要修改。\n  # 默认设置仅在未指定 MD 语法时使用。\n  # 图表的字体颜色\n  fontColor:\n    light: \"rgba(0, 0, 0, 0.8)\"\n    dark: \"rgba(255, 255, 255, 0.8)\"\n  # 图表的边框颜色\n  borderColor:\n    light: \"rgba(0, 0, 0, 0.1)\"\n    dark: \"rgba(255, 255, 255, 0.2)\"\n  # 雷达图和极区图的刻度标签背景颜色\n  scale_ticks_backdropColor:\n    light: \"transparent\"\n    dark: \"transparent\"\n\n# Note - Bootstrap 提示框\nnote:\n  # Note 标签样式值:\n  #  - simple    bs-callout 旧警告样式。默认。\n  #  - modern    bs-callout 新 (v2-v3) 警告样式。\n  #  - flat      扁平提示框样式，带背景，如 Mozilla 或 StackOverflow。\n  #  - disabled  禁用所有 Note 标签的 CSS 样式。\n  style: flat\n  # 是否显示图标\n  icons: true\n  # 边框半径\n  border_radius: 3\n  # 背景颜色偏移百分比 (modern: -12 | 12; flat: -18 | 6)。\n  # 也应用于标签变量。此选项可与禁用的 Note 标签一起使用。\n  light_bg_offset: 0\n\n# --------------------------------------\n# 其他设置\n# --------------------------------------\n\n# https://github.com/MoOx/pjax\npjax:\n  # 是否启用 pjax\n  enable: false\n  # 排除指定页面不使用 pjax，如 '/music/'\n  exclude:\n    # - /xxxxxx/\n\n# 注入 CSS 和脚本 (aplayer/meting)\naplayerInject:\n  # 是否启用注入\n  enable: false\n  # 是否每页启用\n  per_page: true\n\n# Snackbar - Toast 通知\n# https://github.com/polonel/SnackBar\n# 位置: top-left / top-center / top-right / bottom-left / bottom-center / bottom-right\nsnackbar:\n  # 是否启用 Snackbar\n  enable: false\n  # 通知位置\n  position: bottom-left\n  # 浅色模式和深色模式下的通知背景颜色\n  bg_light: '#49b1f5'\n  bg_dark: '#1f1f1f'\n\n# Instant.page\n# https://instant.page/\ninstantpage: false\n\n# Lazyload\n# https://github.com/verlok/vanilla-lazyload\nlazyload:\n  # 是否启用 Lazyload\n  enable: false\n  # 使用浏览器的原生 lazyload 而不是 vanilla-lazyload\n  native: false\n  # 指定使用 Lazyload 的范围 (site 或 post)\n  field: site\n  placeholder:\n  blur: false\n\n# PWA\n# 参见 https://github.com/JLHwung/hexo-offline\n# ---------------\npwa:\n  # 是否启用 PWA\n  enable: false\n  # PWA manifest 文件路径\n  manifest:\n  # Apple Touch 图标路径\n  apple_touch_icon:\n  # 32x32 像素的 favicon 图标路径\n  favicon_32_32:\n  # 16x16 像素的 favicon 图标路径\n  favicon_16_16:\n  # mask 图标路径\n  mask_icon:\n\n# Open graph meta tags\n# 参见 https://hexo.io/docs/helpers#open-graph\nOpen_Graph_meta:\n  # 是否启用 Open Graph meta 标签\n  enable: true\n  option:\n    # twitter_card:\n    # twitter_image:\n    # twitter_id:\n    # twitter_site:\n    # google_plus:\n    # fb_admins:\n    # fb_app_id:\n\n# 结构化数据\n# https://developers.google.com/search/docs/guides/intro-structured-data\nstructured_data: true\n\n# 添加供应商前缀以确保兼容性\n# 是否启用 CSS 前缀\ncss_prefix: true\n\n# Inject\n# 插入代码到 head（在 '</head>' 标签之前）和底部（在 '</body>' 标签之前）\ninject:\n  head:\n    # - <link rel=\"stylesheet\" href=\"/xxx.css\">\n  bottom:\n    # - <script src=\"xxxx\"></script>\n\n# CDN 设置\n# 除非你知道它们的工作原理，否则不要修改以下设置\nCDN:\n  # 内部和第三方脚本的 CDN 提供商\n  # 两者的选项：local/jsdelivr/unpkg/cdnjs/custom\n  # 注意： Dev 版本只能使用 'local' 作为内部脚本\n  # 注意：将第三方脚本设置为 'local' 时，需要安装 hexo-butterfly-extjs\n  internal_provider: local\n  third_party_provider: jsdelivr\n\n  # 是否在 URL 中添加版本号，true 或 false\n  version: false\n\n  # 自定义格式\n  # 例如：https://cdn.staticfile.org/${cdnjs_name}/${version}/${min_cdnjs_file}\n  custom_format:\n\n  option:\n    ......\n```\n\n安装所需插件：\n\n```typescript\nnpm install hexo-wordcount --save\nnpm install hexo-generator-search --save\n```\n\n在 `_config.yml` 末尾添加：\n\n```yaml\nsearch:\n  path: search.json\n  field: post\n  format: html\n  content: true\n```\n\n### 6.6 语言\n\n修改 Hexo 的配置文件 `_config.yml`：\n\n```yaml\nlanguage: zh-CN\n```\n\n### 6.7 网站资料\n\nHexo 文章链接默认的生成规则是：`:year/:month/:day/:title`，是按照年、月、日、标题来生成的。生成的链接非常长，如果标题中含中文的话，复制 URL 链接会转一大串编码字符。\n\n安装 abbrlink 插件：\n\n```typescript\nnpm install hexo-abbrlink --save\n```\n\n修改网站各种资料，例如标题、副标题和邮箱等个人资料，请修改 Hexo 的 `_config.yml`：\n\n```yaml\n# Site\ntitle: 'Yongz丶'\nsubtitle: ''\ndescription: '欲买桂花同载酒，终不似，少年游。'\nkeywords: Blog\nauthor: 'Yongz丶'\nlanguage: zh-CN\ntimezone: 'Asia/Shanghai'\n\n# URL\n## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'\nurl: https://yongz.fun/\npermalink: posts/:abbrlink.html\nabbrlink:\n  alg: crc32  # 算法：crc16(default) and crc32\n  rep: hex    # 进制：dec(default) and hex\npermalink_defaults:\npretty_urls:\n  trailing_index: true # Set to false to remove trailing 'index.html' from permalinks\n  trailing_html: true # Set to false to remove trailing '.html' from permalinks\n```\n\n这里将页面都添加了 `.html` 的后缀，用来伪装成静态页面（虽说 Hexo 的页面本身就是静态页面），这样可以直接从路径就知道这是个静态页面，方便 SEO。\n\n## 7 插件推荐\n\n上述过程中已经安装的插件：\n\n```shell\nhexo-deployer-git\nhexo-wordcount\nhexo-generator-search\nhexo-abbrlink\n```\n\n还可以安装一下插件：\n\n```shell\nnpm install hexo-pangu\n```\n\n在 `_config.yml` 添加在末尾：\n\n```yaml\npangu:\n  enable: true\n  field: site # site/post\n```\n","categories":["日常"]}]